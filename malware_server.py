import socket
import threading
import time
from clear_output import *
from command_procces import*

HEADER = 1024
PORT = 65435
FORMAT = 'UTF-8'
HOST = socket.gethostbyname(socket.gethostname())


address_connection=[]
def help():
    print("exit->disconnect all sockets between server and clients")
    print("sendall ->to send special command for all connected clients")
    print("client ->if you press the client you can see the connected client and then you can select one client to send message to it")
    print("help-> help you")

def send_all():
   if len(address_connection):
        request=input("what command you want to send to the all of connected clients")
        for i, (client_connection, client_addrres) in enumerate(address_connection, start=0):
                        if not is_socket_connected(client_connection):
                            address_connection.remove((client_connection,client_addrres))
                            client_connection.close()
                        else:
                            msg="sendall "+request
                
                            client_connection.sendall(msg.encode(FORMAT))
                            
   else :print("you dont have any connected clients")
                        


def client():
     if len(address_connection): 
                    print("Connected clients:")
                    i=0
                    current_client=[]
                    for i, (client_connection, client_addrres) in enumerate(address_connection, start=0):
                        if not is_socket_connected(client_connection):
                            address_connection.remove((client_connection,client_addrres))
                            client_connection.close()
                        else:
                         current_client.append((client_connection,client_addrres))
                         print(f"{i}. {client_addrres}")
                    if len(address_connection):
                        special_client=int(input("Please enter what client you need to get some data from it from up list:"))
                        if special_client >= 0 and special_client<len(current_client) :
                         try:
                            time.sleep(3)
                            clear_screen() 
                            input_string=input("Please enter what command you need to get from client:")
                            special_client=address_connection.index(current_client[special_client])
                            (client,client_addr)=address_connection[special_client]
                            if input_string.startswith("UPLOAD"):
                                client.sendall(input_string.encode(FORMAT))
                                upload_file(client,input_string)
                            elif input_string.startswith("DOWNLOAD"):
                                client.sendall(input_string.encode(FORMAT))
                                download_file(client,input_string)
                            else:
                                handle_client(client,client_addr,input_string.encode(FORMAT))
                            
                         except ValueError:
                            print("the connection that you choice is disconnect")      
                        else:print("Your input is invalid Please try again")
                        current_client.clear()
                    else :print("you dont have any connection with clients")
     else:print("you dont have any connection with clients")

def handle_client(conn, addr,request):
       try:
        conn.sendall(request)
        data = conn.recv(1024).decode(FORMAT)
        print("Received:")
        for line in data.split('\n'):
         print(line.strip())
        
        time.sleep(3)
        clear_screen()
       except BrokenPipeError:
        address_connection.remove((conn,addr))
        print("Connection with the client is disconnect.")
        
    
def show_new_connection():
     num_connection=len(address_connection)
     while(True):
          if len(address_connection):
             if num_connection<len(address_connection):
                print(f"{len(address_connection)-num_connection} new connection")
                num_connection=len(address_connection)
            
def is_socket_connected(sock):
    try:
        # Attempt to send a small piece of data
        sock.send(b' ')
        return True
    except BrokenPipeError:
        return False
    except OSError as e:
        # Handle the case when the socket is closed
        print(f"Error occurred while checking socket connection: {e}")
        return False


def handel_input():
     show_new_connection_thread=threading.Thread(target=show_new_connection).start()
     while True:
            request=input()
            if request=="client":
                if len(address_connection):client() 
                else:
                    print("you dont have any connection with clients")
                    help()
            elif request=="exit": cleanup() 
            elif request=="help": help() 
            elif request=="sendall":send_all()  
            else : 
                print("your input is invalid please try again") 
                help()
            
        
            
            
            
            
            
            
            
def start():
    global server
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((HOST, PORT))
    server.listen()
    print(f"[LISTENING] Server is listening on {HOST}")
    try:
        handel_thread=threading.Thread(target=handel_input).start()
        while True:
            conn, addr = server.accept()
            address_connection.append((conn,addr))
    except KeyboardInterrupt:
       cleanup()
          
    finally:
        cleanup()




def cleanup():
    check=True
    global server
    if server:
        server.close()
        print("Server socket closed.")
    if len(address_connection):
        for (client_connection,client_addrres) in address_connection:
            try:
                client_connection.shutdown(socket.SHUT_RDWR)
                client_connection.close()
                print(f"Connection with {client_addrres} closed.")
            except OSError as e:
                print(f"Error closing connection waith {client_addrres}: {e}")
            
        address_connection.clear()
        close_proccess()



if __name__=="__main__":
  start()
